/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
even-valued terms.*/

// Creating Array of Fibonacci sequence numbers less than or equal to 4 million:

/**
 * SUDO CODE
 *
 * FUNCTION evenFibSum
 *    SET fibArray = an array with starting values of 1, 2
 *    SET fibSum = 2
 *    WHILE the number of values in the fibArray is less than or equal to 4000000
 *        LET fibValue = the last value in fibArray + the second to last value in fibArray
 *        ADD fibValue to the end of fibArray
 *        IF fibValue is an even number
 *            ADD fibValue to fibSum
 *        END IF
 *    END WHILE
 *    RETURN fibSum
 * END FUNCTION
 */

function evenFibSum(limit) {
    const fibArray = [1, 2];
    let fibSum = 2;
    while (fibArray[fibArray.length - 1] <= limit) {
        let fibValue = (fibArray[fibArray.length - 1]) + (fibArray[fibArray.length - 2]);
        fibArray.push(fibValue);
        if (fibValue % 2 === 0) {
            fibSum += fibValue;
        }
    }
    return fibSum;
}

console.log(evenFibSum(4000000));
